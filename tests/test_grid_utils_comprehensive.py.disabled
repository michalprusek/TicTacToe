"""
Comprehensive tests for grid_utils module.
Tests grid keypoint processing and transformation functionality.
"""

import pytest
import numpy as np
from app.core.grid_utils import (
    sort_grid_points, calculate_homography, transform_points,
    validate_grid_points, find_grid_bounds, normalize_grid_coordinates
)


class TestSortGridPoints:
    """Test grid point sorting functionality."""

    def test_sort_grid_points_basic(self):
        """Test basic grid point sorting."""
        # Create 4x4 grid points in random order
        points = np.array([
            [100, 100], [200, 100], [300, 100], [400, 100],  # Row 1
            [100, 200], [200, 200], [300, 200], [400, 200],  # Row 2
            [100, 300], [200, 300], [300, 300], [400, 300],  # Row 3
            [100, 400], [200, 400], [300, 400], [400, 400],  # Row 4
        ])
        
        # Shuffle to simulate random detection order
        np.random.seed(42)
        shuffled_indices = np.random.permutation(16)
        shuffled_points = points[shuffled_indices]
        
        sorted_points = sort_grid_points(shuffled_points)
        
        assert sorted_points.shape == (16, 2)
        # Should be sorted top-to-bottom, left-to-right
        assert np.allclose(sorted_points, points, atol=1)

    def test_sort_grid_points_with_noise(self):
        """Test grid point sorting with noisy detection."""
        points = np.array([
            [102, 98], [198, 105], [305, 95], [395, 102],
            [105, 195], [195, 205], [298, 198], [402, 195],
            [98, 305], [205, 295], [295, 302], [398, 298],
            [103, 398], [202, 405], [302, 395], [405, 402],
        ])
        
        sorted_points = sort_grid_points(points)
        assert sorted_points.shape == (16, 2)

    def test_sort_grid_points_empty(self):
        """Test with empty input."""
        points = np.array([]).reshape(0, 2)
        sorted_points = sort_grid_points(points)
        assert sorted_points.shape == (0, 2)

    def test_sort_grid_points_insufficient_points(self):
        """Test with insufficient points."""
        points = np.array([[100, 100], [200, 200]])
        sorted_points = sort_grid_points(points)
        assert sorted_points.shape == (2, 2)


class TestCalculateHomography:
    """Test homography calculation."""

    def test_calculate_homography_basic(self):
        """Test basic homography calculation."""
        # Source points (detected grid)
        src_points = np.array([
            [100, 100], [200, 100], [300, 100], [400, 100],
            [100, 200], [200, 200], [300, 200], [400, 200],
            [100, 300], [200, 300], [300, 300], [400, 300],
            [100, 400], [200, 400], [300, 400], [400, 400],
        ], dtype=np.float32)
        
        # Destination points (ideal grid)
        dst_points = np.array([
            [0, 0], [1, 0], [2, 0], [3, 0],
            [0, 1], [1, 1], [2, 1], [3, 1],
            [0, 2], [1, 2], [2, 2], [3, 2],
            [0, 3], [1, 3], [2, 3], [3, 3],
        ], dtype=np.float32)
        
        homography = calculate_homography(src_points, dst_points)
        assert homography is not None
        assert homography.shape == (3, 3)

    def test_calculate_homography_insufficient_points(self):
        """Test with insufficient points."""
        src_points = np.array([[100, 100], [200, 200]], dtype=np.float32)
        dst_points = np.array([[0, 0], [1, 1]], dtype=np.float32)
        
        homography = calculate_homography(src_points, dst_points)
        assert homography is None

    def test_calculate_homography_invalid_input(self):
        """Test with invalid input."""
        src_points = np.array([])
        dst_points = np.array([])
        
        homography = calculate_homography(src_points, dst_points)
        assert homography is None


class TestTransformPoints:
    """Test point transformation functionality."""

    def test_transform_points_identity(self):
        """Test point transformation with identity matrix."""
        points = np.array([[100, 200], [300, 400]], dtype=np.float32)
        homography = np.eye(3, dtype=np.float32)
        
        transformed = transform_points(points, homography)
        assert np.allclose(transformed, points, atol=1e-5)

    def test_transform_points_translation(self):
        """Test point transformation with translation."""
        points = np.array([[0, 0], [1, 1]], dtype=np.float32)
        # Translation matrix (shift by 10, 20)
        homography = np.array([
            [1, 0, 10],
            [0, 1, 20],
            [0, 0, 1]
        ], dtype=np.float32)
        
        expected = np.array([[10, 20], [11, 21]], dtype=np.float32)
        transformed = transform_points(points, homography)
        assert np.allclose(transformed, expected, atol=1e-5)

    def test_transform_points_empty(self):
        """Test with empty points."""
        points = np.array([]).reshape(0, 2).astype(np.float32)
        homography = np.eye(3, dtype=np.float32)
        
        transformed = transform_points(points, homography)
        assert transformed.shape == (0, 2)

    def test_transform_points_invalid_homography(self):
        """Test with invalid homography."""
        points = np.array([[100, 200]], dtype=np.float32)
        homography = None
        
        transformed = transform_points(points, homography)
        assert transformed is None


class TestValidateGridPoints:
    """Test grid point validation."""

    def test_validate_grid_points_valid(self):
        """Test with valid grid points."""
        points = np.array([
            [100, 100], [200, 100], [300, 100], [400, 100],
            [100, 200], [200, 200], [300, 200], [400, 200],
            [100, 300], [200, 300], [300, 300], [400, 300],
            [100, 400], [200, 400], [300, 400], [400, 400],
        ])
        
        is_valid = validate_grid_points(points)
        assert is_valid is True

    def test_validate_grid_points_insufficient(self):
        """Test with insufficient points."""
        points = np.array([[100, 100], [200, 200]])
        
        is_valid = validate_grid_points(points)
        assert is_valid is False

    def test_validate_grid_points_empty(self):
        """Test with empty points."""
        points = np.array([]).reshape(0, 2)
        
        is_valid = validate_grid_points(points)
        assert is_valid is False

    def test_validate_grid_points_invalid_shape(self):
        """Test with invalid shape."""
        points = np.array([100, 200, 300])  # Wrong shape
        
        is_valid = validate_grid_points(points)
        assert is_valid is False


class TestFindGridBounds:
    """Test grid bounds calculation."""

    def test_find_grid_bounds_basic(self):
        """Test basic grid bounds calculation."""
        points = np.array([
            [100, 150], [300, 120], [500, 140],
            [90, 250], [310, 260], [480, 240],
            [110, 380], [290, 370], [490, 390],
        ])
        
        bounds = find_grid_bounds(points)
        assert bounds is not None
        assert len(bounds) == 4  # min_x, min_y, max_x, max_y
        assert bounds[0] <= bounds[2]  # min_x <= max_x
        assert bounds[1] <= bounds[3]  # min_y <= max_y

    def test_find_grid_bounds_single_point(self):
        """Test with single point."""
        points = np.array([[100, 200]])
        
        bounds = find_grid_bounds(points)
        assert bounds is not None
        assert bounds[0] == bounds[2] == 100
        assert bounds[1] == bounds[3] == 200

    def test_find_grid_bounds_empty(self):
        """Test with empty points."""
        points = np.array([]).reshape(0, 2)
        
        bounds = find_grid_bounds(points)
        assert bounds is None


class TestNormalizeGridCoordinates:
    """Test grid coordinate normalization."""

    def test_normalize_grid_coordinates_basic(self):
        """Test basic coordinate normalization."""
        points = np.array([
            [100, 100], [200, 100], [300, 100],
            [100, 200], [200, 200], [300, 200],
            [100, 300], [200, 300], [300, 300],
        ])
        
        normalized = normalize_grid_coordinates(points)
        assert normalized is not None
        assert normalized.shape == points.shape
        
        # Check that coordinates are normalized to [0, 1] range
        assert np.all(normalized >= 0)
        assert np.all(normalized <= 1)

    def test_normalize_grid_coordinates_single_point(self):
        """Test with single point."""
        points = np.array([[100, 200]])
        
        normalized = normalize_grid_coordinates(points)
        assert normalized is not None
        # Single point should normalize to [0, 0] or [1, 1]
        assert normalized.shape == (1, 2)

    def test_normalize_grid_coordinates_empty(self):
        """Test with empty points."""
        points = np.array([]).reshape(0, 2)
        
        normalized = normalize_grid_coordinates(points)
        assert normalized is not None
        assert normalized.shape == (0, 2)

    def test_normalize_grid_coordinates_same_coordinates(self):
        """Test with identical coordinates."""
        points = np.array([[100, 100], [100, 100], [100, 100]])
        
        normalized = normalize_grid_coordinates(points)
        assert normalized is not None
        # All identical points should normalize to same value
        assert np.allclose(normalized[0], normalized[1])
        assert np.allclose(normalized[1], normalized[2])


class TestGridUtilsIntegration:
    """Integration tests for grid utils."""

    def test_full_grid_processing_pipeline(self):
        """Test complete grid processing pipeline."""
        # Simulate detected grid points in random order
        raw_points = np.array([
            [105, 305], [200, 100], [300, 200], [95, 195],
            [400, 100], [100, 100], [200, 200], [300, 100],
            [400, 200], [100, 200], [300, 300], [200, 300],
            [400, 300], [100, 300], [200, 400], [300, 400],
        ])
        
        # Step 1: Sort points
        sorted_points = sort_grid_points(raw_points)
        assert sorted_points.shape == (16, 2)
        
        # Step 2: Validate
        is_valid = validate_grid_points(sorted_points)
        assert is_valid is True
        
        # Step 3: Find bounds
        bounds = find_grid_bounds(sorted_points)
        assert bounds is not None
        
        # Step 4: Normalize
        normalized = normalize_grid_coordinates(sorted_points)
        assert normalized is not None
        assert np.all(normalized >= 0)
        assert np.all(normalized <= 1)

    def test_error_handling_robustness(self):
        """Test error handling across all functions."""
        invalid_inputs = [
            np.array([]),
            np.array([1, 2, 3]),
            None,
            "invalid",
        ]
        
        for invalid_input in invalid_inputs:
            try:
                sort_grid_points(invalid_input)
                validate_grid_points(invalid_input)
                find_grid_bounds(invalid_input)
                normalize_grid_coordinates(invalid_input)
            except Exception:
                # Should handle errors gracefully
                pass

    def test_performance_with_large_datasets(self):
        """Test performance with larger datasets."""
        # Generate large random grid
        large_points = np.random.rand(1000, 2) * 1000
        
        # Should handle large datasets without issues
        sorted_points = sort_grid_points(large_points)
        assert sorted_points.shape == (1000, 2)
        
        is_valid = validate_grid_points(sorted_points)
        assert isinstance(is_valid, bool)
        
        bounds = find_grid_bounds(sorted_points)
        assert bounds is not None
        
        normalized = normalize_grid_coordinates(sorted_points)
        assert normalized.shape == (1000, 2)