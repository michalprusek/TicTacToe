"""
Comprehensive tests for utils module.
Tests utility functions and helper methods.
"""

import pytest
import time
from unittest.mock import Mock, patch
from app.core.utils import FPSCalculator, calculate_distance, ensure_directory_exists


class TestFPSCalculator:
    """Test FPS calculation functionality."""

    def test_fps_calculator_initialization(self):
        """Test FPS calculator initialization."""
        fps_calc = FPSCalculator()
        assert fps_calc.frame_count == 0
        assert fps_calc.start_time is not None
        assert fps_calc.last_time is not None

    def test_fps_calculator_update(self):
        """Test FPS calculator update."""
        fps_calc = FPSCalculator()
        initial_count = fps_calc.frame_count
        
        fps_calc.update()
        assert fps_calc.frame_count == initial_count + 1

    def test_fps_calculator_get_fps_no_time_elapsed(self):
        """Test FPS calculation with no time elapsed."""
        fps_calc = FPSCalculator()
        
        # Mock time to simulate no elapsed time
        with patch('time.time', return_value=fps_calc.start_time):
            fps = fps_calc.get_fps()
            assert fps == 0.0

    def test_fps_calculator_get_fps_with_frames(self):
        """Test FPS calculation with frames."""
        fps_calc = FPSCalculator()
        
        # Simulate some time passing
        fps_calc.update()
        fps_calc.update()
        fps_calc.update()
        
        # Mock time to simulate 1 second elapsed
        with patch('time.time', return_value=fps_calc.start_time + 1.0):
            fps = fps_calc.get_fps()
            assert fps == 3.0

    def test_fps_calculator_reset(self):
        """Test FPS calculator reset."""
        fps_calc = FPSCalculator()
        fps_calc.update()
        fps_calc.update()
        
        fps_calc.reset()
        assert fps_calc.frame_count == 0
        assert fps_calc.start_time is not None
        assert fps_calc.last_time is not None

    def test_fps_calculator_get_interval_fps(self):
        """Test interval FPS calculation."""
        fps_calc = FPSCalculator()
        
        # Update and simulate time passing
        fps_calc.update()
        initial_time = fps_calc.last_time
        
        # Mock time for next update
        with patch('time.time', return_value=initial_time + 0.5):
            fps_calc.update()
            interval_fps = fps_calc.get_interval_fps()
            assert interval_fps == 2.0  # 1 frame in 0.5 seconds = 2 FPS

    def test_fps_calculator_multiple_updates(self):
        """Test multiple FPS updates."""
        fps_calc = FPSCalculator()
        
        for i in range(10):
            fps_calc.update()
            time.sleep(0.01)  # Small delay
        
        fps = fps_calc.get_fps()
        assert fps > 0
        assert fps_calc.frame_count == 10


class TestCalculateDistance:
    """Test distance calculation functionality."""

    def test_calculate_distance_basic(self):
        """Test basic distance calculation."""
        point1 = (0, 0)
        point2 = (3, 4)
        
        distance = calculate_distance(point1, point2)
        assert distance == 5.0  # 3-4-5 triangle

    def test_calculate_distance_same_points(self):
        """Test distance between same points."""
        point1 = (5, 5)
        point2 = (5, 5)
        
        distance = calculate_distance(point1, point2)
        assert distance == 0.0

    def test_calculate_distance_negative_coordinates(self):
        """Test distance with negative coordinates."""
        point1 = (-3, -4)
        point2 = (0, 0)
        
        distance = calculate_distance(point1, point2)
        assert distance == 5.0

    def test_calculate_distance_float_coordinates(self):
        """Test distance with float coordinates."""
        point1 = (1.5, 2.5)
        point2 = (4.5, 6.5)
        
        distance = calculate_distance(point1, point2)
        expected = ((4.5 - 1.5) ** 2 + (6.5 - 2.5) ** 2) ** 0.5
        assert abs(distance - expected) < 1e-10

    def test_calculate_distance_tuple_vs_list(self):
        """Test distance calculation with different input types."""
        point1 = (0, 0)
        point2 = [3, 4]
        
        distance = calculate_distance(point1, point2)
        assert distance == 5.0

    def test_calculate_distance_large_numbers(self):
        """Test distance with large numbers."""
        point1 = (1000000, 2000000)
        point2 = (1000003, 2000004)
        
        distance = calculate_distance(point1, point2)
        assert distance == 5.0


class TestEnsureDirectoryExists:
    """Test directory creation functionality."""

    @patch('os.path.exists')
    @patch('os.makedirs')
    def test_ensure_directory_exists_creates_directory(self, mock_makedirs, mock_exists):
        """Test creating non-existent directory."""
        mock_exists.return_value = False
        
        result = ensure_directory_exists('/path/to/directory')
        
        mock_makedirs.assert_called_once_with('/path/to/directory', exist_ok=True)
        assert result is True

    @patch('os.path.exists')
    @patch('os.makedirs')
    def test_ensure_directory_exists_already_exists(self, mock_makedirs, mock_exists):
        """Test with existing directory."""
        mock_exists.return_value = True
        
        result = ensure_directory_exists('/path/to/directory')
        
        mock_makedirs.assert_not_called()
        assert result is True

    @patch('os.path.exists')
    @patch('os.makedirs')
    def test_ensure_directory_exists_handles_exception(self, mock_makedirs, mock_exists):
        """Test exception handling in directory creation."""
        mock_exists.return_value = False
        mock_makedirs.side_effect = OSError("Permission denied")
        
        result = ensure_directory_exists('/path/to/directory')
        
        mock_makedirs.assert_called_once()
        assert result is False

    @patch('os.path.exists')
    @patch('os.makedirs')
    def test_ensure_directory_exists_empty_path(self, mock_makedirs, mock_exists):
        """Test with empty path."""
        result = ensure_directory_exists('')
        
        mock_exists.assert_not_called()
        mock_makedirs.assert_not_called()
        assert result is False

    @patch('os.path.exists')
    @patch('os.makedirs')
    def test_ensure_directory_exists_none_path(self, mock_makedirs, mock_exists):
        """Test with None path."""
        result = ensure_directory_exists(None)
        
        mock_exists.assert_not_called()
        mock_makedirs.assert_not_called()
        assert result is False


class TestUtilsIntegration:
    """Integration tests for utils module."""

    def test_fps_calculator_real_timing(self):
        """Test FPS calculator with real timing."""
        fps_calc = FPSCalculator()
        
        # Simulate processing frames
        start_time = time.time()
        for _ in range(5):
            fps_calc.update()
            time.sleep(0.01)  # 10ms delay
        
        elapsed = time.time() - start_time
        fps = fps_calc.get_fps()
        
        # Should be approximately 5 frames / elapsed time
        expected_fps = 5 / elapsed
        assert abs(fps - expected_fps) < 1.0  # Allow some tolerance

    def test_distance_calculation_accuracy(self):
        """Test distance calculation accuracy."""
        # Test various geometric patterns
        test_cases = [
            ((0, 0), (1, 0), 1.0),  # Horizontal
            ((0, 0), (0, 1), 1.0),  # Vertical
            ((0, 0), (1, 1), 2**0.5),  # Diagonal
            ((-1, -1), (1, 1), 2 * 2**0.5),  # Across origin
        ]
        
        for point1, point2, expected in test_cases:
            distance = calculate_distance(point1, point2)
            assert abs(distance - expected) < 1e-10

    def test_error_handling_robustness(self):
        """Test error handling across utility functions."""
        # Test with invalid inputs
        try:
            calculate_distance(None, (0, 0))
        except Exception:
            pass  # Should handle gracefully
        
        try:
            calculate_distance((0, 0), None)
        except Exception:
            pass  # Should handle gracefully
        
        # FPS calculator should handle edge cases
        fps_calc = FPSCalculator()
        fps = fps_calc.get_fps()  # No updates yet
        assert fps >= 0

    def test_utility_functions_performance(self):
        """Test utility functions performance."""
        # Distance calculation should be fast
        start_time = time.time()
        for _ in range(1000):
            calculate_distance((0, 0), (100, 100))
        elapsed = time.time() - start_time
        assert elapsed < 1.0  # Should complete in less than 1 second
        
        # FPS calculator should be fast
        fps_calc = FPSCalculator()
        start_time = time.time()
        for _ in range(1000):
            fps_calc.update()
        elapsed = time.time() - start_time
        assert elapsed < 1.0  # Should complete in less than 1 second