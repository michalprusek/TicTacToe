#!/usr/bin/env python3
"""
Debug script pro anal√Ωzu transformace sou≈ôadnic.
Analyzuje cel√Ω pipeline od detekce grid points a≈æ po world coordinates.
"""

import sys
import os
import json
import numpy as np

# P≈ôid√°n√≠ path pro import
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from app.main.path_utils import setup_project_path
setup_project_path()

def load_calibration_data():
    """Naƒçte kalibraƒçn√≠ data."""
    cal_file = "app/calibration/hand_eye_calibration.json"
    try:
        with open(cal_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ kalibrace: {e}")
        return None

def analyze_calibration():
    """Analyzuje kalibraƒçn√≠ data."""
    print("=== ANAL√ùZA KALIBRAƒåN√çCH DAT ===")
    
    cal_data = load_calibration_data()
    if not cal_data:
        return
        
    # Matice transformace
    matrix = cal_data["perspective_transform_matrix_xy_to_uv"]
    print(f"Transformaƒçn√≠ matice XY‚ÜíUV:")
    for row in matrix:
        print(f"  {row}")
    
    # Anal√Ωza kalibraƒçn√≠ch bod≈Ø
    points = cal_data["calibration_points_raw"]
    print(f"\nKalibraƒçn√≠ body ({len(points)} bod≈Ø):")
    
    uv_coords = []
    xy_coords = []
    
    for i, point in enumerate(points):
        uv = point["target_uv"]
        xy = point["robot_xyz"][:2]  # jen X,Y
        uv_coords.append(uv)
        xy_coords.append(xy)
        print(f"  {i+1:2d}: UV=({uv[0]:4d}, {uv[1]:4d}) ‚Üí XY=({xy[0]:6.1f}, {xy[1]:6.1f})")
    
    # Rozsahy
    uv_coords = np.array(uv_coords)
    xy_coords = np.array(xy_coords)
    
    print(f"\nRozsahy:")
    print(f"  UV: X={uv_coords[:,0].min():4.0f}..{uv_coords[:,0].max():4.0f}, Y={uv_coords[:,1].min():4.0f}..{uv_coords[:,1].max():4.0f}")
    print(f"  XY: X={xy_coords[:,0].min():6.1f}..{xy_coords[:,0].max():6.1f}, Y={xy_coords[:,1].min():6.1f}..{xy_coords[:,1].max():6.1f}")

def test_transformation(test_uv_points):
    """Testuje transformaci konkr√©tn√≠ch UV bod≈Ø."""
    print("\n=== TEST TRANSFORMACE ===")
    
    cal_data = load_calibration_data()
    if not cal_data:
        return
        
    # Matice transformace
    xy_to_uv_matrix = np.array(cal_data["perspective_transform_matrix_xy_to_uv"], dtype=np.float32)
    uv_to_xy_matrix = np.linalg.inv(xy_to_uv_matrix)
    
    print(f"Inverzn√≠ matice UV‚ÜíXY:")
    for row in uv_to_xy_matrix:
        print(f"  {row}")
    
    print(f"\nTest transformace bod≈Ø:")
    for i, (u, v) in enumerate(test_uv_points):
        # Homogenn√≠ sou≈ôadnice
        uv_point = np.array([u, v, 1.0], dtype=np.float32).reshape(3, 1)
        xy_result = np.dot(uv_to_xy_matrix, uv_point)
        
        if xy_result[2, 0] != 0:
            x = xy_result[0, 0] / xy_result[2, 0]
            y = xy_result[1, 0] / xy_result[2, 0]
            print(f"  {i+1}: UV=({u:4.0f}, {v:4.0f}) ‚Üí XY=({x:6.1f}, {y:6.1f})")
        else:
            print(f"  {i+1}: UV=({u:4.0f}, {v:4.0f}) ‚Üí CHYBA (dƒõlen√≠ nulou)")

def simulate_grid_cells():
    """Simuluje typick√© pozice center bunƒõk."""
    print("\n=== SIMULACE BUNƒöK ===")
    
    # Typick√© pozice center bunƒõk na 1920x1080 rozli≈°en√≠
    # Pokud je grid nƒõkde uprost≈ôed obrazu
    center_x, center_y = 960, 540
    cell_size = 100  # p≈ôibli≈æn√° velikost bu≈àky v pixelech
    
    test_points = []
    print("Simulovan√© pozice center bunƒõk:")
    for row in range(3):
        for col in range(3):
            # St≈ôed gridu + offset pro ka≈ædou bu≈àku
            u = center_x + (col - 1) * cell_size
            v = center_y + (row - 1) * cell_size
            test_points.append((u, v))
            print(f"  Bu≈àka ({row},{col}): UV=({u:4.0f}, {v:4.0f})")
    
    return test_points

if __name__ == "__main__":
    print("üîç DEBUG ANAL√ùZA TRANSFORMACE SOU≈òADNIC")
    print("=" * 50)
    
    # Anal√Ωza kalibraƒçn√≠ch dat
    analyze_calibration()
    
    # Simulace a test bunƒõk
    test_points = simulate_grid_cells()
    test_transformation(test_points)
    
    print("\n‚úÖ Anal√Ωza dokonƒçena")
    print("\nPro dal≈°√≠ debugging spus≈• aplikaci a sleduj logy z _get_cell_coordinates_from_yolo()")